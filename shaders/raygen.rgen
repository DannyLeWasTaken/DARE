#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_ARB_shader_clock : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#include "ray_struct.inc.glsl"
#include "random.inc.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 1, set = 0, rgba32f) uniform image2D rt_out;
layout(binding = 2, set = 0, rgba32f) uniform image2D old_image;

layout(push_constant) uniform PushConstants {
    mat4 view;
    mat4 projection;
    uint frame_id;
} pc;

layout(location = 0) rayPayloadEXT Payload payload;

void main() {
    // Default values for the payload
    payload.current.hit_value = vec3(1.0);
    payload.current.incoming_light = vec3(0.0);
    payload.current.missed = false;
    payload.current.depth = 0;
    payload.current.bounces = 0;
    payload.current.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

    // Compute normalized pixel coordinates between 0 and 1 + add jitter
    const vec2 pixel_jitter = pc.frame_id > 1 ? vec2(rnd(payload.current.seed), rnd(payload.current.seed)) : vec2(0.5f, 0.5f);
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + pixel_jitter;
    const vec2 in_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    vec2 normalized_uv = in_uv * 2.0 - 1.0;

    // Apply inverse of view and projection to find camera direction
    // This gives us the origin and direction of the ray
    vec4 origin = inverse(pc.view) * vec4(0, 0, 0, 1);
    vec4 target = inverse(pc.projection) * vec4(normalized_uv.x, normalized_uv.y, 1, 1);
    vec4 direction = inverse(pc.view) * vec4(normalize(target.xyz), 0);

    payload.current.ray_origin = origin.xyz;
    payload.current.ray_direction = direction.xyz;

    uint ray_flags = gl_RayFlagsNoneEXT;
    // Set min and max distance for intersections along the ray. Useful for optimisation (cfr near/far planes).
    const float min_dist = 0.001;
    const float max_dist = 10000.0;

    while (!payload.current.missed && payload.current.depth <= 10 && payload.current.bounces <= 4) {
        // Do the actual ray tracing
        traceRayEXT(
            tlas,                   // Top-level acceleration structure
            ray_flags,              // Ray flags
            0xFF,                   // Cull mask
            0,                      // sbtRecordOffset
            0,                      // sbtRecordStride
            0,                      // Index of the miss shader to use
            payload.current.ray_origin,             // Ray origin
            min_dist,               // Minimum ray range
            payload.current.ray_direction,          // Ray direction
            max_dist,               // Maximum ray range
            0                       // Location of the ray payload
        );
        payload.previous = payload.current;
        payload.current.depth += 1;
    }
    payload.current = payload.current.missed ? payload.previous : payload.current;
    payload.current.missed = true;
    traceRayEXT(
        tlas, // Top-level acceleration structure
        ray_flags, // Ray flags
        0xFF, // Cull mask
        0, // sbtRecordOffset
        0, // sbtRecordStride
        0, // Index of the miss shader to use
        payload.current.ray_origin, // Ray origin
        min_dist, // Minimum ray range
        normalize(vec3(0.25, 0.75, 0.25) + (vec3(rnd(payload.current.seed), rnd(payload.current.seed), rnd(payload.current.seed)) / 10)), // Ray direction
        max_dist, // Maximum ray range
        0                       // Location of the ray payload
    );
    if (pc.frame_id > 1) {
        vec3 old_color = imageLoad(old_image, ivec2(gl_LaunchIDEXT.xy)).rgb;
        // Caulcate contribution
        float a = 1.0f / float(pc.frame_id);
        // Mix the old and new colors together
        vec3 final_color = mix(old_color, payload.current.incoming_light, a);

        imageStore(rt_out, ivec2(gl_LaunchIDEXT.xy), vec4(final_color, 1.0));
        imageStore(old_image, ivec2(gl_LaunchIDEXT.xy), vec4(final_color, 1.0));
    } else {
        // First frame, do not worry about accumulation
        imageStore(old_image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.current.incoming_light, 1.0));
        imageStore(rt_out, ivec2(gl_LaunchIDEXT.xy), vec4(payload.current.incoming_light, 1.0));
    }
    // that is cool
}